== Configuration

The behavior of WebTester can be configured on a browser by browser basis by
providing a `Configuration` instance while creating the `Browser`.

A `Configuration` instance can be created by using a `ConfigurationBuilder`
implementation. That instance can then be used to customize the browser's
configuration using a `BrowserBuilder`.

=== BaseConfigurationBuilder

The `BaseConfigurationBuilder` will use a `BaseConfiguration` instance as a
starting point. It takes `ConfigurationAdapter` and `ConfigurationExporter`
instances as options before the `build()` operation.

=== ConfigurationAdapter

A `ConfigurationAdapter` is used to change properties of an existing
`Configuration`. This is done using a callback method `adapt(Configuration c)`.

The following adapters are provided by the `webtester-core` module:

* `GlobalFileConfigurationAdapter`
* `LocalFileConfigurationAdapter`

==== GlobalFileConfigurationAdapter

This adapter looks up a properties file called
`testit-webtester-global.properties` on the classpath's root level and loads
each contained key / value pair into the provided `Configuration` instance.

==== LocalFileConfigurationAdapter

This adapter looks up a properties file called `testit-webtester.properties` on
the classpath's root level and loads each contained key / value pair into the
provided `Configuration` instance.

=== ConfigurationExporter

A `ConfigurationExporter` is used to "export" a `Configuration` to another
System. This is done by using a callback method `export(String key, Object
value)` for each key / value pair of the `Configuration`.

The following exporters are provided by the `webtester-core` module:

* `SystemPropertyConfigurationExporter`

==== SystemPropertyConfigurationExporter

This exporter can be used to export each key / value pair as system properties
in order to make them accessible using `System#getProperty(String key)`.

=== Default Configuration

Since not everyone needs to customize the configuration in the context of his or
her project a 'DefaultConfigurationBuilder' is provided which uses the following
adapters (in order) and no exporters to build a Configuration :

* `GlobalFileConfigurationAdapter`
* `LocalFileConfigurationAdapter`

_This builder is also used in case a `Browser` is build without providing a
custom `Configuration` instance._

[source, java]
----
ConfigurationAdapter adapter1 = ...;
ConfigurationAdapter adapter2 = ...;
ConfigurationExporter exporter = ...;

// this will adapt a base configuration first with 'adapter1' and then with 'adapter2'
// after that the final configuration will be exported using the 'exporter'
Configuration config = new BaseConfigurationBuilder()
                            .withAdapters(adapter1, adapter2)
                            .withExporter(exporter)
                            .build();
----

=== Default Properties

These are all the named properties loaded by default:

include::{snippets}/config/default-configuration.snippet[]
